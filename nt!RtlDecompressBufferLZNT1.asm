nt!RtlDecompressBufferLZNT1:
; store rbx and rcx in stack
fffff805`22ba7d50 48895c2418      mov     qword ptr [rsp+18h],rbx
fffff805`22ba7d55 48894c2408      mov     qword ptr [rsp+8],rcx
; push 7 registers, which is 64(0x40)bytes totaly
fffff805`22ba7d5a 55              push    rbp
fffff805`22ba7d5b 56              push    rsi
fffff805`22ba7d5c 57              push    rdi
fffff805`22ba7d5d 4154            push    r12
fffff805`22ba7d5f 4155            push    r13
fffff805`22ba7d61 4156            push    r14
fffff805`22ba7d63 4157            push    r15
; transfer rsp to rbp
fffff805`22ba7d65 488bec          mov     rbp,rsp
; give me some(0x50) space in the stack
fffff805`22ba7d68 4883ec50        sub     rsp,50h
; init r12d to 0
fffff805`22ba7d6c 4533e4          xor     r12d,r12d
; store original size into r15d
fffff805`22ba7d6f 448bfa          mov     r15d,edx
; r13d now is the length of compressed data(which is also theoretically(packetsize-hedersize-offset), because an overflow occured)
fffff805`22ba7d72 458be9          mov     r13d,r9d
;  rsi is the pointer to unknown area
fffff805`22ba7d75 498bf0          mov     rsi,r8
; r14 is now pointing to `allocated buffer beginning addr + 0x18 + offset`
fffff805`22ba7d78 4c8bf1          mov     r14,rcx
; init a local var to 0
fffff805`22ba7d7b 4c8965e0        mov     qword ptr [rbp-20h],r12
; r15 is now pointing `allocated buffer beginning addr + 0x18 + offset + origial size`
fffff805`22ba7d7f 4c03f9          add     r15,rcx
; r13 is now pointing the beginning of compressed data + the length of compressed data
; which is the end of compressed data theoretically
; (packetsize-hedersize-offset)+(smbheader_pointer+0x000000010000000f)
; 1040-16-0xffffffff + smbheader_pointer + 0x000000010000000f
; 1025 + smbheader_pointer + 0x000000010000000f
; r13 -> smbheader_pointer + 0x0000000100000410
; this is a totally unknown area
fffff805`22ba7d82 4d03e8          add     r13,r8
; xor for 128bit register, so xmm0 is init to 0
fffff805`22ba7d85 0f57c0          xorps   xmm0,xmm0
; ebx is init to 0x1
fffff805`22ba7d88 418d5c2401      lea     ebx,[r12+1]
; edx is init to 0x1
fffff805`22ba7d8d 8bd3            mov     edx,ebx
; now rcx point to a local var
fffff805`22ba7d8f 488d4de0        lea     rcx,[rbp-20h]
; init r8 to 0
fffff805`22ba7d93 4533c0          xor     r8d,r8d
; init edi to 0
fffff805`22ba7d96 418bfc          mov     edi,r12d
; init a 128bit loca var to 0
fffff805`22ba7d99 f30f7f45e8      movdqu  xmmword ptr [rbp-18h],xmm0
; this function didn't trigger crash, omit it for now
fffff805`22ba7d9e e8dd8194ff      call    nt!KeInitializeEvent (fffff805`224eff80)
; init a loca var to 0x1
fffff805`22ba7da3 48895df8        mov     qword ptr [rbp-8],rbx
; copy 2bytes un-init value to ebx, here the target system crashed
; because rsi is an address that we are not allowed to access
; https://img-blog.csdnimg.cn/9389f341541f4dd2b53088877d700c82.png
; the reason we can't access it is that it is not within the allocated buffer
fffff805`22ba7da7 0fb71e          movzx   ebx,word ptr [rsi]
fffff805`22ba7daa 8bcb            mov     ecx,ebx
fffff805`22ba7dac 44896548        mov     dword ptr [rbp+48h],r12d
fffff805`22ba7db0 eb73            jmp     nt!RtlDecompressBufferLZNT1+0xd5 (fffff805`22ba7e25)  Branch

nt!RtlDecompressBufferLZNT1+0x62:
fffff805`22ba7db2 448be1          mov     r12d,ecx
fffff805`22ba7db5 6685db          test    bx,bx
fffff805`22ba7db8 0f89ea000000    jns     nt!RtlDecompressBufferLZNT1+0x158 (fffff805`22ba7ea8)  Branch

nt!RtlDecompressBufferLZNT1+0x6e:
fffff805`22ba7dbe 8b5d60          mov     ebx,dword ptr [rbp+60h]
fffff805`22ba7dc1 85db            test    ebx,ebx
fffff805`22ba7dc3 0f84af4c1200    je      nt!RtlDecompressBufferLZNT1+0x124d28 (fffff805`22ccca78)  Branch

nt!RtlDecompressBufferLZNT1+0x79:
fffff805`22ba7dc9 488d0431        lea     rax,[rcx+rsi]
fffff805`22ba7dcd 895c2428        mov     dword ptr [rsp+28h],ebx
fffff805`22ba7dd1 488d4de0        lea     rcx,[rbp-20h]
fffff805`22ba7dd5 4889442420      mov     qword ptr [rsp+20h],rax
fffff805`22ba7dda 4c8d4e02        lea     r9,[rsi+2]
fffff805`22ba7dde 4d8bc7          mov     r8,r15
fffff805`22ba7de1 498bd6          mov     rdx,r14
fffff805`22ba7de4 e80fd3a4ff      call    nt!LZNT1DecompressChunkNewThread (fffff805`225f50f8)
fffff805`22ba7de9 8bf8            mov     edi,eax
fffff805`22ba7deb 85c0            test    eax,eax
fffff805`22ba7ded 0f88f24c1200    js      nt!RtlDecompressBufferLZNT1+0x124d95 (fffff805`22cccae5)  Branch

nt!RtlDecompressBufferLZNT1+0xa3:
fffff805`22ba7df3 8bcb            mov     ecx,ebx
fffff805`22ba7df5 895d48          mov     dword ptr [rbp+48h],ebx

nt!RtlDecompressBufferLZNT1+0xa8:
fffff805`22ba7df8 8bc1            mov     eax,ecx
fffff805`22ba7dfa 4903f4          add     rsi,r12
fffff805`22ba7dfd 4c03f0          add     r14,rax
fffff805`22ba7e00 4d3bf7          cmp     r14,r15
fffff805`22ba7e03 7440            je      nt!RtlDecompressBufferLZNT1+0xf5 (fffff805`22ba7e45)  Branch

nt!RtlDecompressBufferLZNT1+0xb5:
fffff805`22ba7e05 498d45fe        lea     rax,[r13-2]
fffff805`22ba7e09 483bf0          cmp     rsi,rax
fffff805`22ba7e0c 7737            ja      nt!RtlDecompressBufferLZNT1+0xf5 (fffff805`22ba7e45)  Branch

nt!RtlDecompressBufferLZNT1+0xbe:
fffff805`22ba7e0e 0fb71e          movzx   ebx,word ptr [rsi]
fffff805`22ba7e11 6685db          test    bx,bx
fffff805`22ba7e14 742f            je      nt!RtlDecompressBufferLZNT1+0xf5 (fffff805`22ba7e45)  Branch

nt!RtlDecompressBufferLZNT1+0xc6:
fffff805`22ba7e16 81f900100000    cmp     ecx,1000h
fffff805`22ba7e1c 0f829a4c1200    jb      nt!RtlDecompressBufferLZNT1+0x124d6c (fffff805`22cccabc)  Branch

nt!RtlDecompressBufferLZNT1+0xd2:
fffff805`22ba7e22 0fb7cb          movzx   ecx,bx

nt!RtlDecompressBufferLZNT1+0xd5:
fffff805`22ba7e25 81e1ff0f0000    and     ecx,0FFFh
fffff805`22ba7e2b 83c103          add     ecx,3
fffff805`22ba7e2e 8bc1            mov     eax,ecx
fffff805`22ba7e30 4803c6          add     rax,rsi
fffff805`22ba7e33 493bc5          cmp     rax,r13
fffff805`22ba7e36 0f8676ffffff    jbe     nt!RtlDecompressBufferLZNT1+0x62 (fffff805`22ba7db2)  Branch

nt!RtlDecompressBufferLZNT1+0xec:
fffff805`22ba7e3c 488b4568        mov     rax,qword ptr [rbp+68h]
fffff805`22ba7e40 e9ae4c1200      jmp     nt!RtlDecompressBufferLZNT1+0x124da3 (fffff805`22cccaf3)  Branch

nt!RtlDecompressBufferLZNT1+0xf5:
fffff805`22ba7e45 488b4568        mov     rax,qword ptr [rbp+68h]
fffff805`22ba7e49 493bf5          cmp     rsi,r13
fffff805`22ba7e4c 0f87a14c1200    ja      nt!RtlDecompressBufferLZNT1+0x124da3 (fffff805`22cccaf3)  Branch

nt!RtlDecompressBufferLZNT1+0x102:
fffff805`22ba7e52 442b7540        sub     r14d,dword ptr [rbp+40h]
fffff805`22ba7e56 448930          mov     dword ptr [rax],r14d

nt!RtlDecompressBufferLZNT1+0x109:
fffff805`22ba7e59 33db            xor     ebx,ebx

nt!RtlDecompressBufferLZNT1+0x10b:
fffff805`22ba7e5b 83c8ff          or      eax,0FFFFFFFFh
fffff805`22ba7e5e f00fc145f8      lock xadd dword ptr [rbp-8],eax
fffff805`22ba7e63 83f801          cmp     eax,1
fffff805`22ba7e66 0f84934c1200    je      nt!RtlDecompressBufferLZNT1+0x124daf (fffff805`22cccaff)  Branch

nt!RtlDecompressBufferLZNT1+0x11c:
fffff805`22ba7e6c 4533c9          xor     r9d,r9d
fffff805`22ba7e6f 48895c2420      mov     qword ptr [rsp+20h],rbx
fffff805`22ba7e74 4533c0          xor     r8d,r8d
fffff805`22ba7e77 488d4de0        lea     rcx,[rbp-20h]
fffff805`22ba7e7b 33d2            xor     edx,edx
fffff805`22ba7e7d e8ce1c95ff      call    nt!KeWaitForSingleObject (fffff805`224f9b50)
fffff805`22ba7e82 85ff            test    edi,edi
fffff805`22ba7e84 7808            js      nt!RtlDecompressBufferLZNT1+0x13e (fffff805`22ba7e8e)  Branch

nt!RtlDecompressBufferLZNT1+0x136:
fffff805`22ba7e86 8b45fc          mov     eax,dword ptr [rbp-4]
fffff805`22ba7e89 85c0            test    eax,eax
fffff805`22ba7e8b 0f48f8          cmovs   edi,eax

nt!RtlDecompressBufferLZNT1+0x13e:
fffff805`22ba7e8e 488b9c24a0000000 mov     rbx,qword ptr [rsp+0A0h]
fffff805`22ba7e96 8bc7            mov     eax,edi
fffff805`22ba7e98 4883c450        add     rsp,50h
fffff805`22ba7e9c 415f            pop     r15
fffff805`22ba7e9e 415e            pop     r14
fffff805`22ba7ea0 415d            pop     r13
fffff805`22ba7ea2 415c            pop     r12
fffff805`22ba7ea4 5f              pop     rdi
fffff805`22ba7ea5 5e              pop     rsi
fffff805`22ba7ea6 5d              pop     rbp
fffff805`22ba7ea7 c3              ret

nt!RtlDecompressBufferLZNT1+0x158:
fffff805`22ba7ea8 4983fc02        cmp     r12,2
fffff805`22ba7eac 728e            jb      nt!RtlDecompressBufferLZNT1+0xec (fffff805`22ba7e3c)  Branch

nt!RtlDecompressBufferLZNT1+0x15e:
fffff805`22ba7eae 83c1fe          add     ecx,0FFFFFFFEh
fffff805`22ba7eb1 8bc1            mov     eax,ecx
fffff805`22ba7eb3 4903c6          add     rax,r14
fffff805`22ba7eb6 894d48          mov     dword ptr [rbp+48h],ecx
fffff805`22ba7eb9 493bc7          cmp     rax,r15
fffff805`22ba7ebc 0f87ec4b1200    ja      nt!RtlDecompressBufferLZNT1+0x124d5e (fffff805`22cccaae)  Branch

nt!RtlDecompressBufferLZNT1+0x172:
fffff805`22ba7ec2 448bc1          mov     r8d,ecx
fffff805`22ba7ec5 488d4602        lea     rax,[rsi+2]
fffff805`22ba7ec9 4903c0          add     rax,r8
fffff805`22ba7ecc 493bc5          cmp     rax,r13
fffff805`22ba7ecf 0f8767ffffff    ja      nt!RtlDecompressBufferLZNT1+0xec (fffff805`22ba7e3c)  Branch

nt!RtlDecompressBufferLZNT1+0x185:
fffff805`22ba7ed5 488d5602        lea     rdx,[rsi+2]
fffff805`22ba7ed9 498bce          mov     rcx,r14
fffff805`22ba7edc e85fafaeff      call    nt!memcpy (fffff805`22692e40)

nt!RtlDecompressBufferLZNT1+0x191:
fffff805`22ba7ee1 8b4d48          mov     ecx,dword ptr [rbp+48h]
fffff805`22ba7ee4 e90fffffff      jmp     nt!RtlDecompressBufferLZNT1+0xa8 (fffff805`22ba7df8)  Branch

nt!RtlDecompressBufferLZNT1+0x124d28:
fffff805`22ccca78 4c8d0c31        lea     r9,[rcx+rsi]
fffff805`22ccca7c 498bd7          mov     rdx,r15
fffff805`22ccca7f 488d4548        lea     rax,[rbp+48h]
fffff805`22ccca83 498bce          mov     rcx,r14
fffff805`22ccca86 4c8d4602        lea     r8,[rsi+2]
fffff805`22ccca8a 4889442420      mov     qword ptr [rsp+20h],rax
fffff805`22ccca8f e85cc59bff      call    nt!LZNT1DecompressChunk (fffff805`22688ff0)
fffff805`22ccca94 33db            xor     ebx,ebx
fffff805`22ccca96 8bf8            mov     edi,eax
fffff805`22ccca98 85c0            test    eax,eax
fffff805`22ccca9a 0f8941b4edff    jns     nt!RtlDecompressBufferLZNT1+0x191 (fffff805`22ba7ee1)  Branch

nt!RtlDecompressBufferLZNT1+0x124d50:
fffff805`22cccaa0 488b4d68        mov     rcx,qword ptr [rbp+68h]
fffff805`22cccaa4 8b4548          mov     eax,dword ptr [rbp+48h]
fffff805`22cccaa7 8901            mov     dword ptr [rcx],eax
fffff805`22cccaa9 e9adb3edff      jmp     nt!RtlDecompressBufferLZNT1+0x10b (fffff805`22ba7e5b)  Branch

nt!RtlDecompressBufferLZNT1+0x124d5e:
fffff805`22cccaae 418bcf          mov     ecx,r15d
fffff805`22cccab1 412bce          sub     ecx,r14d
fffff805`22cccab4 894d48          mov     dword ptr [rbp+48h],ecx
fffff805`22cccab7 e906b4edff      jmp     nt!RtlDecompressBufferLZNT1+0x172 (fffff805`22ba7ec2)  Branch

nt!RtlDecompressBufferLZNT1+0x124d6c:
fffff805`22cccabc b800100000      mov     eax,1000h
fffff805`22cccac1 2bc1            sub     eax,ecx
fffff805`22cccac3 4c63c0          movsxd  r8,eax
fffff805`22cccac6 4f8d2430        lea     r12,[r8+r14]
fffff805`22cccaca 4d3be7          cmp     r12,r15
fffff805`22cccacd 0f8372b3edff    jae     nt!RtlDecompressBufferLZNT1+0xf5 (fffff805`22ba7e45)  Branch

nt!RtlDecompressBufferLZNT1+0x124d83:
fffff805`22cccad3 33d2            xor     edx,edx
fffff805`22cccad5 498bce          mov     rcx,r14
fffff805`22cccad8 e8a3669cff      call    nt!memset (fffff805`22693180)
fffff805`22cccadd 4d8bf4          mov     r14,r12
fffff805`22cccae0 e93db3edff      jmp     nt!RtlDecompressBufferLZNT1+0xd2 (fffff805`22ba7e22)  Branch

nt!RtlDecompressBufferLZNT1+0x124d95:
fffff805`22cccae5 488b4d68        mov     rcx,qword ptr [rbp+68h]
fffff805`22cccae9 8b4548          mov     eax,dword ptr [rbp+48h]
fffff805`22cccaec 8901            mov     dword ptr [rcx],eax
fffff805`22cccaee e966b3edff      jmp     nt!RtlDecompressBufferLZNT1+0x109 (fffff805`22ba7e59)  Branch

nt!RtlDecompressBufferLZNT1+0x124da3:
fffff805`22cccaf3 bf420200c0      mov     edi,0C0000242h
fffff805`22cccaf8 8930            mov     dword ptr [rax],esi
fffff805`22cccafa e95ab3edff      jmp     nt!RtlDecompressBufferLZNT1+0x109 (fffff805`22ba7e59)  Branch

nt!RtlDecompressBufferLZNT1+0x124daf:
fffff805`22cccaff 4533c0          xor     r8d,r8d
fffff805`22cccb02 488d4de0        lea     rcx,[rbp-20h]
fffff805`22cccb06 33d2            xor     edx,edx
fffff805`22cccb08 e8a3a983ff      call    nt!KeSetEvent (fffff805`225074b0)
fffff805`22cccb0d 90              nop
fffff805`22cccb0e e959b3edff      jmp     nt!RtlDecompressBufferLZNT1+0x11c (fffff805`22ba7e6c)  Branch
