nt!RtlDecompressBufferEx2:
fffff807`027ec220 4053            push    rbx
; give me some space(0x40bytes) in the stack!
fffff807`027ec222 4883ec40        sub     rsp,40h
; init eax
fffff807`027ec226 b8ff000000      mov     eax,0FFh;
; transfer param_2 to r10
fffff807`027ec22b 4d8bd1          mov     r10,r9
; cx is 0x2, and after this and operation, it is still x02
fffff807`027ec22e 6623c8          and     cx,ax
; transfer param_3 to r11d, original size
fffff807`027ec231 458bd8          mov     r11d,r8d
; rbx is now pointing to `allocated buffer beginning addr + 0x18 + offset`
fffff807`027ec234 488bda          mov     rbx,rdx
; check if cx is 0x2, jb and ja shall not be taken
fffff807`027ec237 6683f902        cmp     cx,2
fffff807`027ec23b 7256            jb      nt!RtlDecompressBufferEx2+0x73 (fffff807`027ec293)  Branch

nt!RtlDecompressBufferEx2+0x1d:
fffff807`027ec23d 6683f904        cmp     cx,4
fffff807`027ec241 7749            ja      nt!RtlDecompressBufferEx2+0x6c (fffff807`027ec28c)  Branch

nt!RtlDecompressBufferEx2+0x23:
; rsp+70h here is the same as rsp+60h in caller
; which is the pushed rdi in caller `fffff807`0566e4bf 57              push    rdi`
; and rdi is the param_1 of srv2!Srv2DecompressData
; it is the packet pointer
; so r9d is now pointing to the packet
; I'll check this in windbg
; oh sorry, I missed `sub     rsp,40h`
; so rsp+70h here should be the same as rsp+20h in caller
; rsp+20h is the param_3 of caller, which is the length of compressed data(which is also theoretically(packetsize-hedersize-offset), because an overflow occured)
fffff807`027ec243 448b4c2470      mov     r9d,dword ptr [rsp+70h]
; r10 is param_2 of caller, which is the pointer to unknown area
; now r8
fffff807`027ec248 4d8bc2          mov     r8,r10
; eax = 0x2
fffff807`027ec24b 0fb7c1          movzx   eax,cx
; edx is now original size of our payload
fffff807`027ec24e 418bd3          mov     edx,r11d
; get fucntion `nt!RtlDecompressBufferProcs` address to rcx
fffff807`027ec251 488d0d88382400  lea     rcx,[nt!RtlDecompressBufferProcs (fffff807`02a2fae0)]
; idk what the fuck is this
; through the windbg, I found that mempry `nt!RtlDecompressBufferProcs` is 16bytes successive 0
; so nt!RtlDecompressBufferProcs+0x10 skip the 0 area, and another address is saved there
; which is a function, and this function will be call by `nt!guard_dispatch_icall`
fffff807`027ec258 488b04c1        mov     rax,qword ptr [rcx+rax*8]
; rsp+88h here is the same as rsp+38h in caller, it is pointing to the return value of fucntion `nt!ExAllocatePoolWithTag`
; now rcx
fffff807`027ec25c 488b8c2488000000 mov     rcx,qword ptr [rsp+88h]
; init a local var rsp+30h to rcx
fffff807`027ec264 48894c2430      mov     qword ptr [rsp+30h],rcx
; rsp+80h here is the same as rsp+30h in caller, which is rsp in srv2!Srv2DecompressMessageAsync
; so far so good, stack is being calculated correctly
fffff807`027ec269 488b8c2480000000 mov     rcx,qword ptr [rsp+80h]
; store rcx to local var
fffff807`027ec271 48894c2428      mov     qword ptr [rsp+28h],rcx
; rsp+78h here is the same as rsp+28h in caller, which is 0x1000
fffff807`027ec276 8b4c2478        mov     ecx,dword ptr [rsp+78h]
; store it into local var
fffff807`027ec27a 894c2420        mov     dword ptr [rsp+20h],ecx
; transfer rbx to rcx
fffff807`027ec27e 488bcb          mov     rcx,rbx
; this is something related to [kCFG](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard)
; I'll study it in the future
; base what I've seen in windbg, it does some check and then jump to rax
; rax is an addr of function `nt!RtlDecompressBufferProcs` with 0x10 offset
; idk why there is an offset, does it mean omit some code?
; https://img-blog.csdnimg.cn/a6175266f28d46219c235bca37b582f0.png
fffff807`027ec281 e82a990900      call    nt!guard_dispatch_icall (fffff807`02885bb0)

nt!RtlDecompressBufferEx2+0x66:
fffff807`027ec286 4883c440        add     rsp,40h
fffff807`027ec28a 5b              pop     rbx
fffff807`027ec28b c3              ret

nt!RtlDecompressBufferEx2+0x6c:
fffff807`027ec28c b85f0200c0      mov     eax,0C000025Fh
fffff807`027ec291 ebf3            jmp     nt!RtlDecompressBufferEx2+0x66 (fffff807`027ec286)  Branch

nt!RtlDecompressBufferEx2+0x73:
fffff807`027ec293 b80d0000c0      mov     eax,0C000000Dh
fffff807`027ec298 ebec            jmp     nt!RtlDecompressBufferEx2+0x66 (fffff807`027ec286)  Branch
