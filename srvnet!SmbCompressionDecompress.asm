srvnet!SmbCompressionDecompress:
; rsp transferred to rax, now rax is point to the top of stack
fffff807`0566e4b0 488bc4          mov     rax,rsp
; rbx is the pointer to allocated buffer
fffff807`0566e4b3 48895810        mov     qword ptr [rax+10h],rbx
; rbp is still the compressionalgorithm, which is 0x1, now stroed into stack
fffff807`0566e4b7 48896818        mov     qword ptr [rax+18h],rbp
; rsi is still offset 0xffffffff
fffff807`0566e4bb 48897020        mov     qword ptr [rax+20h],rsi
fffff807`0566e4bf 57              push    rdi
fffff807`0566e4c0 4156            push    r14
fffff807`0566e4c2 4157            push    r15
; give me some space(0x50bytes) in the stack!
fffff807`0566e4c4 4883ec50        sub     rsp,50h
; init a dword local var to 0
fffff807`0566e4c8 8360d800        and     dword ptr [rax-28h],0
; rdi is init to 0
fffff807`0566e4cc 33ff            xor     edi,edi
; init rsp in caller to 0
fffff807`0566e4ce 83600800        and     dword ptr [rax+8],0
; transfer foruth param to r14
fffff807`0566e4d2 4d8bf1          mov     r14,r9
; transfer third param to ebp
fffff807`0566e4d5 418be8          mov     ebp,r8d
; transfer second param to r15
fffff807`0566e4d8 4c8bfa          mov     r15,rdx
; test if first param is 0
fffff807`0566e4db 85c9            test    ecx,ecx
fffff807`0566e4dd 750a            jne     srvnet!SmbCompressionDecompress+0x39 (fffff807`0566e4e9)  Branch

srvnet!SmbCompressionDecompress+0x2f:
fffff807`0566e4df bbbb0000c0      mov     ebx,0C00000BBh
fffff807`0566e4e4 e9c5000000      jmp     srvnet!SmbCompressionDecompress+0xfe (fffff807`0566e5ae)  Branch

srvnet!SmbCompressionDecompress+0x39:
; with a jne, we come here
; test if ecx is 0x1
fffff807`0566e4e9 83e901          sub     ecx,1
fffff807`0566e4ec 7416            je      srvnet!SmbCompressionDecompress+0x54 (fffff807`0566e504)  Branch

srvnet!SmbCompressionDecompress+0x3e:
fffff807`0566e4ee 83e901          sub     ecx,1
fffff807`0566e4f1 740a            je      srvnet!SmbCompressionDecompress+0x4d (fffff807`0566e4fd)  Branch

srvnet!SmbCompressionDecompress+0x43:
fffff807`0566e4f3 83f901          cmp     ecx,1
fffff807`0566e4f6 75e7            jne     srvnet!SmbCompressionDecompress+0x2f (fffff807`0566e4df)  Branch

srvnet!SmbCompressionDecompress+0x48:
fffff807`0566e4f8 8d5903          lea     ebx,[rcx+3]
fffff807`0566e4fb eb0c            jmp     srvnet!SmbCompressionDecompress+0x59 (fffff807`0566e509)  Branch

srvnet!SmbCompressionDecompress+0x4d:
fffff807`0566e4fd bb03000000      mov     ebx,3
fffff807`0566e502 eb05            jmp     srvnet!SmbCompressionDecompress+0x59 (fffff807`0566e509)  Branch

srvnet!SmbCompressionDecompress+0x54:
; with a je, we come here
; idk what does this mean
fffff807`0566e504 bb02000000      mov     ebx,2

srvnet!SmbCompressionDecompress+0x59:
; now r8 point to somewhere in the stack, in fact, a local var
fffff807`0566e509 4c8d442440      lea     r8,[rsp+40h]
; idk what is this either
fffff807`0566e50e 0fb7cb          movzx   ecx,bx
; rsp - 50h + 70h - 8*4 -> rsp
; now rdx point to rsp in caller
fffff807`0566e511 488d542470      lea     rdx,[rsp+70h]
fffff807`0566e516 4c8b1573400100  mov     r10,qword ptr [srvnet!_imp_RtlGetCompressionWorkSpaceSize (fffff807`05682590)]
; I may check this function later, eax should store the return value
; according to the function name, value in eax should be something like Size
fffff807`0566e51d e89eac0afd      call    nt!RtlGetCompressionWorkSpaceSize (fffff807`027191c0)
fffff807`0566e522 85c0            test    eax,eax
; `js` is just `jne`, if this function succeed, eax should not be 0 and js shall be taken
; oh I fucked up, turns out eax is 0, the return value is just an error number
; not Size
; the Size should be stored in the second param rdx, which is rsp+70h
fffff807`0566e524 782a            js      srvnet!SmbCompressionDecompress+0xa0 (fffff807`0566e550)  Branch

srvnet!SmbCompressionDecompress+0x76:
; get Size
; in windbg, data in rsp+70h is 0x00010020, should be a buffer size
fffff807`0566e526 8b542470        mov     edx,dword ptr [rsp+70h]
fffff807`0566e52a b900020000      mov     ecx,200h
fffff807`0566e52f 41b84c533225    mov     r8d,2532534Ch
fffff807`0566e535 4c8b15bc430100  mov     r10,qword ptr [srvnet!_imp_ExAllocatePoolWithTag (fffff807`056828f8)]
; idk what this function does, just omit it for now
fffff807`0566e53c e8cfba3bfd      call    nt!ExAllocatePoolWithTag (fffff807`02a2a010)
; rax seems like an addr
; and jne shall be taken
fffff807`0566e541 488bf8          mov     rdi,rax
fffff807`0566e544 4885c0          test    rax,rax
fffff807`0566e547 7507            jne     srvnet!SmbCompressionDecompress+0xa0 (fffff807`0566e550)  Branch

srvnet!SmbCompressionDecompress+0x99:
fffff807`0566e549 bb9a0000c0      mov     ebx,0C000009Ah
fffff807`0566e54e eb5e            jmp     srvnet!SmbCompressionDecompress+0xfe (fffff807`0566e5ae)  Branch

srvnet!SmbCompressionDecompress+0xa0:
; with jne, we come here
; [rsp+98h] is just the same as [rsp+28h] in caller
; so rsi would be the rsp in function srv2!Srv2DecompressMessageAsync
fffff807`0566e550 488bb42498000000 mov     rsi,qword ptr [rsp+98h]
; r9 is now param_2
fffff807`0566e558 4d8bcf          mov     r9,r15
; rsp+38h should be a loca var, and it is now pointing to the return value of fucntion `nt!ExAllocatePoolWithTag`
fffff807`0566e55b 48897c2438      mov     qword ptr [rsp+38h],rdi
; now rdx is param_4
fffff807`0566e560 498bd6          mov     rdx,r14
; init another local var rsp+30h to rsi
fffff807`0566e563 4889742430      mov     qword ptr [rsp+30h],rsi
; idk what the fuck these code is doing, just move and move again?
; this instruction has already been executed before
; and the result is same, so ecx is still 0x2
fffff807`0566e568 0fb7cb          movzx   ecx,bx
; init a local var to 0x1000
fffff807`0566e56b c744242800100000 mov     dword ptr [rsp+28h],1000h
; inti a local var to param_3
fffff807`0566e573 896c2420        mov     dword ptr [rsp+20h],ebp
; [rsp+90h] is the same as [rsp+20h] in caller
; so ebp should be OriginalSize field in our payload
fffff807`0566e577 8bac2490000000  mov     ebp,dword ptr [rsp+90h]
; transfer ebp to r8d
fffff807`0566e57e 448bc5          mov     r8d,ebp
fffff807`0566e581 4c8b1518400100  mov     r10,qword ptr [srvnet!_imp_RtlDecompressBufferEx2 (fffff807`056825a0)]
; to be honest, idk what does this function do
; but according to the function name, it seems like to be the key function of BSOD
; let's step over it to see if the target system would crash
; yes, it is!
; we are so close to the truth now!!!
; let's step into it
fffff807`0566e588 e893dc17fd      call    nt!RtlDecompressBufferEx2 (fffff807`027ec220)
fffff807`0566e58d 8bd8            mov     ebx,eax
fffff807`0566e58f 85c0            test    eax,eax
fffff807`0566e591 7802            js      srvnet!SmbCompressionDecompress+0xe5 (fffff807`0566e595)  Branch

srvnet!SmbCompressionDecompress+0xe3:
fffff807`0566e593 892e            mov     dword ptr [rsi],ebp

srvnet!SmbCompressionDecompress+0xe5:
fffff807`0566e595 4885ff          test    rdi,rdi
fffff807`0566e598 7414            je      srvnet!SmbCompressionDecompress+0xfe (fffff807`0566e5ae)  Branch

srvnet!SmbCompressionDecompress+0xea:
fffff807`0566e59a ba4c533225      mov     edx,2532534Ch
fffff807`0566e59f 488bcf          mov     rcx,rdi
fffff807`0566e5a2 4c8b1527430100  mov     r10,qword ptr [srvnet!_imp_ExFreePoolWithTag (fffff807`056828d0)]
fffff807`0566e5a9 e8f2ba3bfd      call    nt!ExFreePool (fffff807`02a2a0a0)

srvnet!SmbCompressionDecompress+0xfe:
fffff807`0566e5ae 4c8d5c2450      lea     r11,[rsp+50h]
fffff807`0566e5b3 8bc3            mov     eax,ebx
fffff807`0566e5b5 498b5b28        mov     rbx,qword ptr [r11+28h]
fffff807`0566e5b9 498b6b30        mov     rbp,qword ptr [r11+30h]
fffff807`0566e5bd 498b7338        mov     rsi,qword ptr [r11+38h]
fffff807`0566e5c1 498be3          mov     rsp,r11
fffff807`0566e5c4 415f            pop     r15
fffff807`0566e5c6 415e            pop     r14
fffff807`0566e5c8 5f              pop     rdi
fffff807`0566e5c9 c3              ret
